/* Copyright 2022 */
//  StringSorter.cpp
//  Clang
//
//  Created by Paramie Willmann on 06.06.22.
//

#include <cstring>
#include "./String.h"

// ____________________________________________________________________________
StringSorter::StringSorter(int size) {
    sizeSorter_ = size;
    dataSorter_ = new String[sizeSorter_];
}

// ____________________________________________________________________________
StringSorter::~StringSorter() {
    delete[] dataSorter_;
}

// ____________________________________________________________________________
String& StringSorter::operator[](int i) {
    return dataSorter_[i];
}

// ____________________________________________________________________________
int StringSorter::size() const {
    return sizeSorter_;
}

// ____________________________________________________________________________
void StringSorter::swap(int l, int r) {
    String temp;
    temp = dataSorter_[r];
    dataSorter_[r] = dataSorter_[l];
    dataSorter_[l] = temp;
}

// ____________________________________________________________________________
void StringSorter::sort() {
    left_ = 0;
    right_ = sizeSorter_;

    this->quicksort_recursive(left_, right_);
}

// ____________________________________________________________________________
void StringSorter::quicksort_recursive(int left, int right) {
    if (left > right) {
        return;
    }
    index_ = this->quicksort(left, right);
    this->quicksort_recursive(left, index_ - 1);
    this->quicksort_recursive(index_ + 1, right);
}

// ____________________________________________________________________________
int StringSorter::quicksort(int left, int right) {
    i_ = left + 1;
    j_ = right;
    while (i_ < j_) {
        while (strcmp(dataSorter_[j_].c_str(), dataSorter_[0].c_str())) {
            --j_;
        }
        while (strcmp(dataSorter_[i_].c_str(), dataSorter_[0].c_str())) {
            ++i_;
            if (i_ == sizeSorter_) {
                break;
            }
        }
        if (i_ < j_) {
            this->swap(i_, j_);
        }
    }
    this->swap(0, j_);
    return j_;
}
