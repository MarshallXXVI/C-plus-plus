/* Copyright 2022 */
//  Set.cpp
//  Clang
//
//  Created by Paramie Willmann on 22.06.22.
//

#include <utility>
#include <stdio.h>
#include "./Set.h"

template<typename T>
Set<T>::Set() {
    size_ = 0;
    node_ = new Node;
    node_->next_ = nullptr;
    node_->_element = nullptr;
}

template<typename T>
bool Set<T>::lookup(T new_element) {
    if (node_->_element == nullptr) {
        return false;
    }
    Node *temp;
    temp = node_;
    while (temp->next_ != nullptr) {
        if (*temp->_element == new_element) {
            return true;
        }
        temp = temp->next_;
    }
    // check last node.
    if (*temp->_element == new_element) {return true;}
    return false;
}

template<typename T>
void Set<T>::insert(T new_element) {
    Node *temp;
    temp = node_;
    // if Set is empty then insert first element.
    if (node_->_element == nullptr) {
        size_++;
        node_->_element = new T(new_element);
        node_->next_ = nullptr;
    } else {
            // insert next element at head position.
            if (lookup(new_element) == 0) {           
                size_++;
                Node *new_node = new Node;
                new_node->_element = new T(new_element);
                new_node->next_ = node_;
                node_ = new_node;
            }
    }
}

template<typename T>
void Set<T>::erase(T target) {
    if (lookup(target) == 0) {
        return;
    }
    size_--;
    Node *temp;
    Node *prev;
    temp = node_;
    prev = nullptr;
    if (*temp->_element == target) {
        node_ = temp->next_;
        delete temp;
    } else {
        while (*temp->_element!= target) {
            prev = temp;
            temp = temp->next_;
        }
        if (temp->_element == nullptr) {
            return;
        }
        prev->next_ = temp->next_;
        delete temp;
    }
}

template class Set<int>;
template class Set<float>;