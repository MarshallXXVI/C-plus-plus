/* Copyright 2022 */
//  StringSorter.cpp
//  Clang
//
//  Created by Paramie Willmann on 06.06.22.
//

#include <stdio.h>

#include <cstring>
#include "./String.h"

// ____________________________________________________________________________
StringSorter::StringSorter(int size) {
    sizeSorter_ = size;
    dataSorter_ = new String[sizeSorter_];
}

// ____________________________________________________________________________
StringSorter::~StringSorter() {
    delete[] dataSorter_;
}

// ____________________________________________________________________________
String& StringSorter::operator[](int i) const {
    return dataSorter_[i];
}

// ____________________________________________________________________________
int StringSorter::size() const {
    return sizeSorter_;
}

// ____________________________________________________________________________
void StringSorter::swap(int l, int r) {
    String t;
    t = dataSorter_[r].c_str();
    dataSorter_[r] = dataSorter_[l];
    dataSorter_[l] = t;
}

// ____________________________________________________________________________
void StringSorter::sort() {
    // printf("start sorting...\n");
    quicksort(0, sizeSorter_ - 1);
}

// ____________________________________________________________________________
void StringSorter::quicksort(int l, int r) {
        if (l >= r) {
            return;
        }
        int index_ = partition(l, r);
        quicksort(l, index_ - 1);
        quicksort(index_ + 1, r);
        return;
    }
// ____________________________________________________________________________
int StringSorter::partition(int l, int r) {
    String pivot = dataSorter_[l];
    int count = 0;
    for (int i = l + 1; i <= r; i++) {
        if (strcmp(dataSorter_[i].c_str(), pivot.c_str()) < 0) {
            count++;
        }
    }

    PivotIndex_ = l + count;
    swap(l, PivotIndex_);  // NOLINT
    i_ = l;
    j_ = r;
    // printf("i: %d \n", i_);
    // printf("j: %d \n", j_);
    while (i_ < PivotIndex_ && j_ > PivotIndex_) {
        while (strcmp(dataSorter_[j_].c_str(), pivot.c_str()) > 0) {
            j_--;
        }
        while (strcmp(dataSorter_[i_].c_str(), pivot.c_str()) < 0) {
            i_++;
        }
        if (i_ < PivotIndex_ && j_ > PivotIndex_) {
            swap(i_, j_);  // NOLINT
        }
    }
    // printf("Finished Partition \n");
    // for (int i = 0; i < sizeSorter_; i++){
    //     printf("%s \n", dataSorter_[i].c_str());
    // }
    return PivotIndex_;
}

// ____________________________________________________________________________
void StringSorter::test() {
    printf("testing");
}
